{"version":3,"sources":["store/store.ts","api/DataFromServer.ts","components/UserItem/UserItem.tsx","components/UserList/UserList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","loadingCondition","prepearedTodoList","sortedTodoList","Actions","loadUsers","dispatch","type","Promise","all","fetch","then","respone","json","user","todoWithUser","map","todoItem","find","userItem","id","userId","store","createStore","state","action","filter","todo","deletedItemId","applyMiddleware","thunk","connect","deleteItem","todoId","key","className","style","backgroundColor","name","title","completed","toString","onClick","sortBy","setSortedTodoList","sortedBy","param","sort","a","b","localeCompare","Number","length","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0TAaA,IAAMA,EAAe,CACnBC,kBAAkB,EAClBC,kBAAmB,GACnBC,eAAgB,IAILC,EACY,wBADZA,EAEc,0BAFdA,EAGO,mBAHPA,EAIW,uBA0BXC,EAAY,WACvB,OAAO,SAACC,GACNA,EAhBgF,CAClFC,KAAMH,IAiBJI,QAAQC,IAAI,CClDPC,MAJY,8CAKhBC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAIpBH,MARY,8CAShBC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,YD6CtBF,MAAK,YAAmB,IAAD,mBAAhBG,EAAgB,KAChBC,EADgB,KACIC,KAAI,SAACC,GAAD,sBAEvBA,EAFuB,CAG1BH,KAAMA,EAAKI,MAAK,SAACC,GAAD,OAAoBA,EAASC,KAAOH,EAASI,eAIjEf,EAjCuE,CAC3EC,KAAMH,EACNF,kBA+BwCa,SAmD7BO,EANDC,aAvCE,WAAsF,IAArFC,EAAoF,uDAArDxB,EAAcyB,EAAuC,uCACnG,OAAQA,EAAOlB,MACb,KAAKH,EACH,OAAO,eACFoB,EADL,CAEEvB,kBAAkB,IAGtB,KAAKG,EACH,OAAO,eACFoB,EADL,CAEEvB,kBAAkB,EAClBC,kBAAmBuB,EAAOvB,kBAC1BC,eAAgBsB,EAAOvB,oBAG3B,KAAKE,EACH,OAAO,eACFoB,EADL,CAEEtB,kBAAmBsB,EAAMtB,kBAAkBwB,QAAO,SAAAC,GAChD,OAAOF,EAAOG,gBAAkBD,EAAKP,MAEvCjB,eAAgBqB,EAAMtB,kBAAkBwB,QAAO,SAAAC,GAC7C,OAAOF,EAAOG,gBAAkBD,EAAKP,QAI3C,KAAKhB,EACH,OAAO,eACFoB,EADL,CAEErB,eAAgBsB,EAAOtB,eACvBD,kBAAmBuB,EAAOtB,iBAG9B,QACE,OAAOqB,KAMXxB,EACA6B,YAAgBC,ME9DHC,eARS,SAACP,GAAD,MAAmC,CACzDtB,kBAAmBsB,EAAMtB,sBAGK,SAACI,GAAD,MAAqC,CACnE0B,WAAY,SAACC,GAAD,OAAoB3B,EFNiD,CACjFC,KAAMH,EACNwB,cEIwDK,QAG3CF,EAvCqB,SAAC,GAA0B,IAAxBJ,EAAuB,EAAvBA,KAAMK,EAAiB,EAAjBA,WAK3C,OACE,wBAAIE,IAAKP,EAAKP,GAAIe,UAAU,aAC1B,wBACEA,UAAU,YACVC,MAAO,CAAEC,gBAAiB,eAEzBV,EAAKb,KAAKwB,MAEb,wBACEH,UAAU,YACVC,MAAO,CAAEC,gBAAiB,eAEzBV,EAAKY,OAER,wBACEJ,UAAWR,EAAKa,UAAY,wBAA0B,wBAErDb,EAAKa,UAAUC,YAElB,4BACE,4BAAQlC,KAAK,SAASmC,QAxBP,WACnBV,EAAWL,EAAKP,MAuBZ,eCmDOW,eATS,SAACP,GAAD,MAAmC,CACzDrB,eAAgBqB,EAAMrB,eACtBD,kBAAmBsB,EAAMtB,sBAGA,SAACI,GAAD,MAAqC,CAC9DqC,OAAQ,SAACxC,GAAD,OAAoCG,EHtCb,SAACH,GAAD,MAAiE,CAChGI,KAAMH,EACND,kBGoCqDyC,CAAkBzC,QAG1D4B,EAhFW,SAAC,GAAmD,IAAjD7B,EAAgD,EAAhDA,kBAAmByC,EAA6B,EAA7BA,OAAQxC,EAAqB,EAArBA,eACtD,SAAS0C,EAASC,GAChB,OAAQA,GACN,IAAK,OACHH,EACE,YAAIzC,GACD6C,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAElC,KAAKgC,GAAOI,cAAcD,EAAEnC,KAAKgC,QAEvD,MACF,IAAK,QACHH,EACE,YAAIzC,GACD6C,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,GAAOI,cAAcD,EAAEH,QAE7C,MACF,IAAK,YACHH,EACE,YAAIzC,GACD6C,MAAK,SAACC,EAAGC,GAAJ,OAAUE,OAAOF,EAAET,WAAaW,OAAOH,EAAER,gBAQzD,OACE,2BAAOL,UAAU,aACf,2BAAOA,UAAU,mBACf,wBAAIA,UAAU,4BACZ,wBAAIA,UAAU,+BACZ,4BACEA,UAAU,aACV5B,KAAK,SACLmC,QAAS,kBAAMG,EAAS,UAH1B,SAQF,wBAAIV,UAAU,+BACZ,4BACEA,UAAU,aACV5B,KAAK,SACLmC,QAAS,kBAAMG,EAAS,WAH1B,UAQF,wBAAIV,UAAU,+BACZ,4BACEA,UAAU,aACV5B,KAAK,SACLmC,QAAS,kBAAMG,EAAS,eAH1B,gBAWN,+BAEI1C,EAAea,KAAI,SAACW,GAAD,OACjB,kBAAC,EAAD,CAAUO,IAAKP,EAAKP,GAAIO,KAAMA,YC3B3BI,G,MAAAA,aATS,SAACP,GAAD,MAAmC,CACzDvB,iBAAkBuB,EAAMvB,iBACxBC,kBAAmBsB,EAAMtB,sBAGA,SAACI,GAAD,MAAoB,CAC7CD,UAAW,kBAAMC,EAASD,SAGb0B,EAjCM,SAAC,GAAwD,IAAtD7B,EAAqD,EAArDA,kBAAmBD,EAAkC,EAAlCA,iBAAkBI,EAAgB,EAAhBA,UAC3D,OACE,oCAEiC,IAA7BH,EAAkBkD,OAEd,4BACE7C,KAAK,SACLmC,QAASrC,EACTgD,SAAUpD,EACVkC,UAAU,YAJZ,QASA,kBAAC,EAAD,CAAUjC,kBAAmBA,IAElCD,GACC,uBAAGkC,UAAU,gBAAb,oBCfYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAUtC,MAAOA,GACf,kBAAC,EAAD,OAEFuC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09454710.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport { getTodos, getUsers } from '../api/DataFromServer';\n// eslint-disable-next-line import/no-cycle\nimport {\n  AppActions,\n  deleteTodoItemInterface,\n  setLoadingConditionActionInterface,\n  setPrepearedTodoListActionInterface,\n  setSortedTodoListInterface,\n} from '../actionsType/actionsType';\n\n\nconst initialState = {\n  loadingCondition: false,\n  prepearedTodoList: [],\n  sortedTodoList: [],\n};\n\n// Action\nexport const Actions = {\n  SET_LOADING_CONDITION: 'SET_LOADING_CONDITION',\n  SET_PREPEARED_TODO_LIST: 'SET_PREPEARED_TODO_LIST',\n  DELETE_TODO_ITEM: 'DELETE_TODO_ITEM',\n  SET_SORTED_TODO_LIST: 'SET_SORTED_TODO_LIST',\n};\n\n\n// ActionCreators\nexport const setPrepearedTodoListAction\n  = (PreperedTdoList: TodoWithUser[]): setPrepearedTodoListActionInterface => ({\n    type: Actions.SET_PREPEARED_TODO_LIST,\n    prepearedTodoList: PreperedTdoList,\n\n});\n\nexport const setLoadingConditionAction = (): setLoadingConditionActionInterface => ({\n  type: Actions.SET_LOADING_CONDITION,\n});\n\nexport const deleteTodoItem = (deletedItemId: number): deleteTodoItemInterface => ({\n  type: Actions.DELETE_TODO_ITEM,\n  deletedItemId,\n});\n\nexport const setSortedTodoList = (sortedTodoList: TodoWithUser[]): setSortedTodoListInterface => ({\n  type: Actions.SET_SORTED_TODO_LIST,\n  sortedTodoList,\n});\n\nexport const loadUsers = () => {\n  return (dispatch: any) => {\n    dispatch(setLoadingConditionAction());\n\n    Promise.all([getUsers(), getTodos()])\n      .then(([user, todo]) => {\n        const todoWithUser = todo.map((todoItem: Todo) => (\n          {\n            ...todoItem,\n            user: user.find((userItem: User) => userItem.id === todoItem.userId),\n          }\n        ));\n\n        dispatch(setPrepearedTodoListAction(todoWithUser));\n      });\n  };\n};\n\n\nconst reducer = (state: InitialStateInterface = initialState, action: any): InitialStateInterface => {\n  switch (action.type) {\n    case Actions.SET_LOADING_CONDITION:\n      return {\n        ...state,\n        loadingCondition: true,\n      };\n\n    case Actions.SET_PREPEARED_TODO_LIST:\n      return {\n        ...state,\n        loadingCondition: false,\n        prepearedTodoList: action.prepearedTodoList,\n        sortedTodoList: action.prepearedTodoList,\n      };\n\n    case Actions.DELETE_TODO_ITEM:\n      return {\n        ...state,\n        prepearedTodoList: state.prepearedTodoList.filter(todo => {\n          return action.deletedItemId !== todo.id;\n        }),\n        sortedTodoList: state.prepearedTodoList.filter(todo => {\n          return action.deletedItemId !== todo.id;\n        }),\n      };\n\n    case Actions.SET_SORTED_TODO_LIST:\n      return {\n        ...state,\n        sortedTodoList: action.sortedTodoList,\n        prepearedTodoList: action.sortedTodoList,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk as ThunkMiddleware<InitialStateInterface, AppActions>),\n);\n\nexport default store;\n","const URL_API_USER = 'https://jsonplaceholder.typicode.com/users';\nconst URL_API_TODO = 'https://jsonplaceholder.typicode.com/todos';\n\nexport function getUsers() {\n  return fetch(URL_API_USER)\n    .then(respone => respone.json());\n}\n\nexport function getTodos() {\n  return fetch(URL_API_TODO)\n    .then(respone => respone.json());\n}\n","import React, { Dispatch, FC } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteTodoItem } from '../../store/store';\nimport { AppActions } from '../../actionsType/actionsType';\n\ninterface UserItemProps {\n  todo: TodoWithUser;\n  deleteItem: any;\n}\n\nconst UserItem: FC<UserItemProps> = ({ todo, deleteItem }) => {\n  const handleDelete = () => {\n    deleteItem(todo.id);\n  };\n\n  return (\n    <tr key={todo.id} className=\"user-item\">\n      <td\n        className=\"user-item\"\n        style={{ backgroundColor: 'darkorange' }}\n      >\n        {todo.user.name}\n      </td>\n      <td\n        className=\"user-item\"\n        style={{ backgroundColor: 'aquamarine' }}\n      >\n        {todo.title}\n      </td>\n      <td\n        className={todo.completed ? 'succes-load user-item' : 'faild-load user-item'}\n      >\n        {todo.completed.toString()}\n      </td>\n      <td>\n        <button type=\"button\" onClick={handleDelete}>delete</button>\n      </td>\n    </tr>\n  );\n};\n\nconst mapStateToProps = (state: InitialStateInterface) => ({\n  prepearedTodoList: state.prepearedTodoList,\n});\n\nconst mapStateDispatchToProps = (dispatch: Dispatch<AppActions>) => ({\n  deleteItem: (todoId: number) => dispatch(deleteTodoItem(todoId)),\n});\n\nexport default connect(mapStateToProps, mapStateDispatchToProps)(UserItem);\n","import React, { Dispatch, FC } from 'react';\nimport { connect } from 'react-redux';\nimport UserItem from '../UserItem/UserItem';\nimport { setSortedTodoList } from '../../store/store';\nimport { AppActions } from '../../actionsType/actionsType';\n\nconst UserList: FC<any> = ({ prepearedTodoList, sortBy, sortedTodoList }) => {\n  function sortedBy(param: string) {\n    switch (param) {\n      case 'name':\n        sortBy(\n          [...prepearedTodoList]\n            .sort((a, b) => a.user[param].localeCompare(b.user[param])),\n        );\n        break;\n      case 'title':\n        sortBy(\n          [...prepearedTodoList]\n            .sort((a, b) => a[param].localeCompare(b[param])),\n        );\n        break;\n      case 'completed':\n        sortBy(\n          [...prepearedTodoList]\n            .sort((a, b) => Number(b.completed) - Number(a.completed)),\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <table className=\"user-list\">\n      <thead className=\"user-list-title\">\n        <tr className=\"user-list-title-item-row\">\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('name')}\n            >\n              Name\n            </button>\n          </th>\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('title')}\n            >\n              Title\n            </button>\n          </th>\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('completed')}\n            >\n              Completed\n            </button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          sortedTodoList.map((todo: TodoWithUser) => (\n            <UserItem key={todo.id} todo={todo} />\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n\nconst mapStateToProps = (state: InitialStateInterface) => ({\n  sortedTodoList: state.sortedTodoList,\n  prepearedTodoList: state.prepearedTodoList,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AppActions>) => ({\n  sortBy: (sortedTodoList: TodoWithUser[]) => dispatch(setSortedTodoList(sortedTodoList)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList);\n","import React, { FC } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport UserList from './components/UserList/UserList';\nimport './App.css';\nimport { loadUsers } from './store/store';\n\n// eslint-disable-next-line no-shadow\nconst App: FC<any> = ({ prepearedTodoList, loadingCondition, loadUsers }) => {\n  return (\n    <>\n      {\n        prepearedTodoList.length === 0\n          ? (\n            <button\n              type=\"button\"\n              onClick={loadUsers}\n              disabled={loadingCondition}\n              className=\"load-btn\"\n            >\n                    Load\n            </button>\n          )\n          : <UserList prepearedTodoList={prepearedTodoList} />\n      }\n      {loadingCondition && (\n        <p className=\"loading-text\">Loading ...</p>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: InitialStateInterface) => ({\n  loadingCondition: state.loadingCondition,\n  prepearedTodoList: state.prepearedTodoList,\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  loadUsers: () => dispatch(loadUsers()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}