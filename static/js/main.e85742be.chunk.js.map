{"version":3,"sources":["store/store.ts","components/UserItem/UserItem.tsx","components/UserList/UserList.tsx","components/InitialButton/InitialButton.tsx","api/DataFromServer.ts","App.tsx","index.tsx"],"names":["ActionType","initialState","prepearedTodoList","isLoaded","store","createStore","state","action","type","value","UserItem","todo","key","id","className","style","backgroundColor","user","name","title","completed","toString","UserList","useState","visibleUserList","setVisibleUserList","sortedBy","param","sort","a","b","localeCompare","Number","onClick","map","isLoadedType","ConnectedInitialButton","connect","dispatch","loadUsers","Promise","all","fetch","then","respone","json","todoWithUser","todoItem","find","userItem","userId","length","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e85742be.chunk.js","sourcesContent":["import { createStore, Action, Reducer } from 'redux';\n\nconst initialState = {\n  prepearedTodoList: [],\n  isLoaded: false,\n};\n\ninterface ReducerTodoState {\n  prepearedTodoList: TodoWithUser[] | [];\n  isLoaded: boolean;\n}\n\nenum ActionType {\n  IsLoaded = 'isLoaded',\n  PrepearedTodoList = 'prepearedTodoList',\n}\n\ninterface StoreAction extends Action<ActionType>{\n  value: Partial<ReducerTodoState>;\n}\n\nconst reducerTodo: Reducer<ReducerTodoState, any> = (\n  state = initialState, action,\n) => {\n  if (action.type === 'isLoaded') {\n    return {\n      ...state,\n      isLoaded: action.value,\n    };\n  }\n\n  if (action.type === 'prepearedTodoList') {\n    return {\n      ...state,\n      prepearedTodoList: action.value,\n    };\n  }\n\n  return state;\n};\n\nexport const store: any = createStore<ReducerTodoState, StoreAction, null, null>(reducerTodo);\n","import React, { FC } from 'react';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const UserItem: FC<Props> = ({ todo }) => {\n  return (\n    <tr key={todo.id} className=\"user-item\">\n      <td\n        className=\"user-item\"\n        style={{ backgroundColor: 'darkorange' }}\n      >\n        {todo.user.name}\n      </td>\n      <td\n        className=\"user-item\"\n        style={{ backgroundColor: 'aquamarine' }}\n      >\n        {todo.title}\n      </td>\n      <td\n        className={todo.completed ? 'succes-load user-item' : 'faild-load user-item'}\n      >\n        {todo.completed.toString()}\n      </td>\n    </tr>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { UserItem } from '../UserItem/UserItem';\n\ninterface Props {\n  prepearedTodoList: TodoWithUser[];\n}\n\nexport const UserList: FC<Props> = ({ prepearedTodoList }) => {\n  const [visibleUserList, setVisibleUserList] = useState([...prepearedTodoList]);\n\n  function sortedBy(param: string) {\n    switch (param) {\n      case 'name':\n        setVisibleUserList(\n          [...prepearedTodoList]\n            .sort((a, b) => a.user[param].localeCompare(b.user[param])),\n        );\n        break;\n      case 'title':\n        setVisibleUserList(\n          [...prepearedTodoList]\n            .sort((a, b) => a[param].localeCompare(b[param])),\n        );\n        break;\n      case 'completed':\n        setVisibleUserList(\n          [...prepearedTodoList]\n            .sort((a, b) => Number(b.completed) - Number(a.completed)),\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <table className=\"user-list\">\n      <thead className=\"user-list-title\">\n        <tr className=\"user-list-title-item-row\">\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('name')}\n            >\n              Name\n            </button>\n          </th>\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('title')}\n            >\n              Title\n            </button>\n          </th>\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('completed')}\n            >\n              Completed\n            </button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          visibleUserList.map(todo => (\n            <UserItem key={todo.id} todo={todo} />\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { UserList } from '../UserList/UserList';\nimport { getTodos, getUsers } from '../../api/DataFromServer';\n\n\nconst TYPE_IS_LOAD = 'isLoaded';\nconst PREPEARD_TOTO_LIST = 'prepearedTodoList';\n\nconst isLoadedType = (value: boolean) => ({\n  type: TYPE_IS_LOAD,\n  value,\n});\nconst PrepearedTodoListType = (value: TodoWithUser[]) => ({\n  type: PREPEARD_TOTO_LIST,\n  value,\n});\n\n\nconst getData = (state: State) => ({\n  isLoaded: state.isLoaded,\n  prepearedTodoList: state.prepearedTodoList,\n});\n\nconst getMethods = (dispatch: any) => ({\n  loadUsers: () => {\n    dispatch(isLoadedType(true));\n\n    Promise.all([getUsers(), getTodos()])\n      .then(([user, todo]) => {\n        const todoWithUser = todo.map(todoItem => (\n          {\n            ...todoItem,\n            user: user.find(userItem => userItem.id === todoItem.userId) as User,\n          }\n        ));\n\n        dispatch(isLoadedType(false));\n        dispatch(PrepearedTodoListType(todoWithUser));\n      });\n  },\n});\n\nconst InitialButton: FC<State & any> = ({ isLoaded, prepearedTodoList, loadUsers }) => {\n  return (\n    <>\n      {\n        prepearedTodoList.length === 0\n          ? (\n            <button\n              type=\"button\"\n              onClick={loadUsers}\n              disabled={isLoaded}\n              className=\"load-btn\"\n            >\n              Load\n            </button>\n          )\n          : <UserList prepearedTodoList={prepearedTodoList} />\n      }\n      {isLoaded && (\n        <p className=\"loading-text\">Loading...</p>\n      )}\n    </>\n  );\n};\n\nexport const ConnectedInitialButton = connect(getData, getMethods)(InitialButton);\n","const URL_API_USER = 'https://jsonplaceholder.typicode.com/users';\nconst URL_API_TODO = 'https://jsonplaceholder.typicode.com/todos';\n\nexport function getUsers(): Promise<User[]> {\n  return fetch(URL_API_USER)\n    .then(respone => respone.json());\n}\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(URL_API_TODO)\n    .then(respone => respone.json());\n}\n","import React, { FC } from 'react';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport { ConnectedInitialButton } from './components/InitialButton/InitialButton';\n\nimport './App.css';\n\nconst App: FC = () => {\n  return (\n    <Provider store={store}>\n      <ConnectedInitialButton />\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}